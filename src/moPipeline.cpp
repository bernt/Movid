/***********************************************************************
 ** Copyright (C) 2010 Movid Authors.  All rights reserved.
 **
 ** This file is part of the Movid Software.
 **
 ** This file may be distributed under the terms of the Q Public License
 ** as defined by Trolltech AS of Norway and appearing in the file
 ** LICENSE included in the packaging of this file.
 **
 ** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 ** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 **
 ** Contact info@movid.org if any conditions of this licensing are
 ** not clear to you.
 **
 **********************************************************************/


//
// moPipeline.cpp
//
// Handle a group of object (pipeline)
//

#include <ctime>
#include <assert.h>
#include <sstream>
#include "moPipeline.h"
#include "moLog.h"

LOG_DECLARE("Pipeline");

MODULE_DECLARE_EX(Pipeline,, "native", "Handle object list");

moPipeline::moPipeline() : moModule(MO_MODULE_NONE, 0, 0) {
	MODULE_INIT();
}

moPipeline::~moPipeline() {
	std::vector<moModule *>::iterator it = this->modules.begin();
	while ( it != this->modules.end() ) {
		delete *it;
		this->modules.erase(it);
	}
}

moModule *moPipeline::firstModule() {
	assert( this->modules.size() > 0 );
	return this->modules[0];
}

moModule *moPipeline::lastModule() {
	assert( this->modules.size() > 0 );
	return this->modules[this->modules.size() - 1];
}

void moPipeline::addElement(moModule *module) {
	assert( module != NULL );
	LOG(MO_TRACE, "add <" << module->property("id").asString() << "> to <" \
		<< this->property("id").asString() << ">");
	module->owner = this;
	this->modules.push_back(module);
}

void moPipeline::removeElement(moModule *module) {
	std::vector<moModule *>::iterator it;
	LOG(MO_TRACE, "remove <" << module->property("id").asString() << "> from <" \
		<< this->property("id").asString() << ">");
	for ( it = this->modules.begin(); it != this->modules.end(); it++ ) {
		if ( *it == module ) {
			this->modules.erase(it);
			break;
		}
	}
}

void moPipeline::setInput(moDataStream* stream, int n) {
	this->firstModule()->setInput(stream, n);
}

moDataStream* moPipeline::getInput(int n) {
	return this->lastModule()->getInput(n);
}

moDataStream* moPipeline::getOutput(int n) {
	return this->lastModule()->getOutput(n);
}

int moPipeline::getInputCount() {
	return this->firstModule()->getInputCount();
}

int moPipeline::getOutputCount() {
	return this->lastModule()->getOutputCount();
}

moDataStreamInfo *moPipeline::getInputInfos(int n) {
	return this->firstModule()->getInputInfos(n);
}

moDataStreamInfo *moPipeline::getOutputInfos(int n) {
	return this->lastModule()->getOutputInfos(n);
}

void moPipeline::start() {
	std::vector<moModule *>::iterator it;

	moModule::start();

	for ( it = this->modules.begin(); it != this->modules.end(); it++ ) {
		(*it)->start();
	}
}

void moPipeline::stop() {
	std::vector<moModule *>::iterator it;

	moModule::stop();

	for ( it = this->modules.begin(); it != this->modules.end(); it++ ) {
		(*it)->stop();
	}
}

void moPipeline::update() {
	// nothing done in pipeline
	return;
}

void moPipeline::poll() {
	std::vector<moModule *>::iterator it;

	LOGM(MO_TRACE, "poll");

	for ( it = this->modules.begin(); it != this->modules.end(); it++ ) {
		(*it)->poll();
	}
}

unsigned int moPipeline::size() {
	return this->modules.size();
}

moModule *moPipeline::getModule(unsigned int index) {
	assert( index >= 0 );
	assert( index < this->size() );

	return this->modules[index];
}

void moPipeline::setGroup(bool group) {
	this->is_group = group;
}

bool moPipeline::isGroup() {
	return this->is_group;
}

bool moPipeline::isPipeline() {
	return true;
}

bool moPipeline::haveError() {
	std::vector<moModule *>::iterator it;
	for ( it = this->modules.begin(); it != this->modules.end(); it++ ) {
		if ( (*it)->haveError() )
			return true;
	}
	return false;
}

std::string moPipeline::getLastError() {
	std::vector<moModule *>::iterator it;
	for ( it = this->modules.begin(); it != this->modules.end(); it++ ) {
		if ( (*it)->haveError() )
			return (*it)->getLastError();
	}
	return "";
}

std::string moPipeline::serializeCreation() {
	std::ostringstream oss;
	char buf[128];
	time_t tt = time(NULL);
	struct tm* tm = localtime(&tt);
	strftime(buf, sizeof(buf)-1, "%x %X", tm);

	oss << "# ================================================================" << std::endl;
	oss << "# PIPELINE AUTOGENERATED on " << buf << std::endl;
	oss << "# ================================================================" << std::endl;
	oss << "" << std::endl;

	////////////////////////////////////////////////////////////////////
	//export modules and their properties
	std::vector<moModule *>::iterator it;
	for ( it = this->modules.begin(); it != this->modules.end(); it++ ) {
		(*it)->serializeCreation(oss);
	}

	////////////////////////////////////////////////////////////////////
	//now do connections, once all modules have been created
	std::vector<moModule *>::iterator mod;
	for ( mod = this->modules.begin(); mod != this->modules.end(); mod++ ) {
		(*mod)->serializeConnections(oss);
	}

	return oss.str();
}
